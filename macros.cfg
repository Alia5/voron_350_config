#####################################################################
#   Macros
#####################################################################

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}
  
[gcode_macro MOIN]
gcode:
    CG28
    QUAD_GANTRY_LEVEL
    G28 Z

[gcode_macro M141]
gcode:
    {% set S = params.S|default(0) %}
    {% set P = params.P|default(0) %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={S}

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    BED_MESH_CLEAR
    G90
    CG28
    QUAD_GANTRY_LEVEL
    G28 Z
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: Pause the print and park
gcode:
  {% if printer.pause_resume.is_paused %}
    RESPOND MSG="Print is already paused"
  {% else %}
    G92 E0
    {% if printer.extruder.can_extrude %}
      G1 E-1.0 F1500.0	; Retract a little to reduce ooze
    {% endif %}
    G90
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####

  {% if not printer.pause_resume.is_paused %}
    RESPOND MSG="Print is not paused. Resume ignored"
  {% else %}
          {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
          #### get VELOCITY parameter if specified ####
          {% if 'VELOCITY' in params|upper %}
            {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
          {%else %}
            {% set get_params = "" %}
          {% endif %}
          ##### end of definitions #####
          {% if printer.extruder.can_extrude|lower == 'true' %}
            M83
            G1 E{extrude} F2100
            {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
          {% else %}
            {action_respond_info("Extruder not hot enough")}
          {% endif %}
        
          RESUME_BASE {get_params}
    {% endif %}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    
    G91
    G1 Z2 F9000
    G90
    
    TURN_OFF_HEATERS
    SDCARD_RESET_FILE
    SET_LED LED=caselight WHITE=0.25 SYNC=0 TRANSMIT=1
    SET_LED LED="headlight" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 INDEX=2
    SET_LED LED="headlight" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 INDEX=3 TRANSMIT=1   
    SET_FAN_SPEED FAN=filter_fan SPEED=0
    SET_FAN_SPEED FAN=controller_fan SPEED=0.7
    UPDATE_DELAYED_GCODE ID=turn_off_exhaust DURATION=120
    CLEAR_PAUSE
    CANCEL_PRINT_BASE

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  75
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set purge_distance = params.PURGE_DISTANCE|default(25)|float %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity / 2} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  75
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    MMU_EJECT
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro M600]
description: Filament change
gcode: PAUSE

[gcode_macro WIPE_NOZZLE]
description: Wipe Nozzle
variable_before_z:  10
gcode:
    {% set move_z = params.MOVE_Z|default("1")|int %}
    {% set safe_z = params.SAFE_Z|default("10")|int %}
    {% set wipe_z = params.WIPE_Z|default("1")|float %}
    {% set start_x = params.START_X|default("315")|float %}
    {% set end_x = params.END_X|default("255")|float %}
    {% set brush_y = params.BRUSH_Y|default("360")|float %}
    {% set speed = params.SPEED|default("350")|float %}
    {% set wipe_speed = params.WIPE_SPEED|default("82")|float %}
    {% set count = params.COUNT|default("1")|int %}
    {% set restore_z = params.RESTORE_Z|default("1")|int %}
    
    SAVE_GCODE_STATE NAME=STATE_WIPE
    G90                                      ; absolute positioning
    {% if restore_z > 0 and move_z > 0 %}
        {% set before_z = printer.toolhead.position.z %}
    {% endif %}

    {% if move_z > 0 %}
        {% if printer.toolhead.position.z < safe_z %}
            G1 Z{safe_z} F9000
        {% endif %}
        G1 X{start_x} Y{brush_y} F{speed * 60}
        G1 Z{wipe_z} F9000
    {% else %}
         G1 X{start_x} Y{brush_y} F{speed * 60}
    {% endif %}
    {% for i in range(count) %}
        {% if i % 2 == 0 %}
            G1 X{end_x} F{wipe_speed * 60}
        {% else %}
            G1 X{start_x} F{wipe_speed * 60}
        {% endif %}
    {% endfor %}
    {% if restore_z > 0 %}
        G1 Z{before_z} F9000
    {% else %}
        {% if restore_z > 0 and move_z > 0 %}
            G1 Z{safe_z} F9000
        {% endif %}
    {% endif %}
    RESTORE_GCODE_STATE NAME=STATE_WIPE

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
    {% endif %}

   
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = 315 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float %}
    {% set TOOLS_USED = params.TOOLS_USED|default("")|string %}

    {% if TOOLS_USED == "" %}
        MMU ENABLE=0
    {% else %}
        MMU ENABLE=1
        MMU_CHECK_GATES TOOLS={TOOLS_USED}
    {% endif %}

    SET_LED LED="headlight" RED=1 GREEN=0 BLUE=0 WHITE=0 SYNC=0 INDEX=1
    SET_LED LED="headlight" RED=0 GREEN=0 BLUE=0 WHITE=1 SYNC=0 INDEX=2
    SET_LED LED="headlight" RED=0 GREEN=0 BLUE=0 WHITE=1 SYNC=0 INDEX=3 TRANSMIT=1    
    SET_LED LED=caselight WHITE=0.75 SYNC=0 TRANSMIT=1
    SET_FAN_SPEED FAN=filter_fan SPEED=1
    SET_FAN_SPEED FAN=controller_fan SPEED=1
    SET_FAN_SPEED FAN=exhaust_fan SPEED=1

    G28
    G90
    BED_MESH_CLEAR
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} F9000                    
    {% if target_bed > printer.heater_bed.temperature  %}
        M190 S{target_bed} 
    {% endif %}

    M104 S165  
    
    SET_DISPLAY_TEXT MSG="QGL"      # Displays info
    #STATUS_LEVELING                 # Sets SB-leds to leveling-mode
    QUAD_GANTRY_LEVEL               # Levels the buildplate via QGL

    SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
    #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
    bed_mesh_calibrate                 # Starts bed mesh

    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    SET_DISPLAY_TEXT MSG="Hotend: 165c"          # Displays info
    M109 S165                                    # Heats the nozzle to 150c

    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
    M107                                                          # Turns off partcooling fan
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp

    WIPE_NOZZLE COUNT=1 RESTORE_Z=0
    G28 Z
    WIPE_NOZZLE COUNT=1 RESTORE_Z=0
    CALIBRATE_Z
    WIPE_NOZZLE COUNT=5 RESTORE_Z=0

    SET_DISPLAY_TEXT MSG="Line Purge"          # Displays info
    LINE_PURGE
    
    SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
    #STATUS_PRINTING                                  # Sets SB-leds to printing-mode
    G90                                              # Absolut position
    
    
[delayed_gcode turn_off_exhaust]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = 315 %}
    {% set y_safe = printer.toolhead.axis_maximum.y|float %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.5 F3800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    M107                                     ; turn off fan
    UNLOAD_FILAMENT PURGE_DISTANCE=0

    SET_LED LED=caselight WHITE=0.25 SYNC=0 TRANSMIT=1
    SET_LED LED="headlight" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 INDEX=2
    SET_LED LED="headlight" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 INDEX=3 TRANSMIT=1   
    SET_FAN_SPEED FAN=filter_fan SPEED=0
    SET_FAN_SPEED FAN=controller_fan SPEED=0.7
    UPDATE_DELAYED_GCODE ID=turn_off_exhaust DURATION=120

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END